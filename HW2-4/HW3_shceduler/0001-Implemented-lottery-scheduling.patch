From ee988d96e4b76411c3df2e89dc256aad4e100da9 Mon Sep 17 00:00:00 2001
From: yufan ren <yr975@nyu.edu>
Date: Mon, 26 Oct 2020 17:44:13 -0400
Subject: [PATCH 1/3] Implemented lottery scheduling

---
 Makefile  |  1 +
 proc.c    | 18 ++++++++++++++++--
 proc.h    |  1 +
 syscall.c |  2 ++
 syscall.h |  1 +
 sysproc.c |  9 +++++++++
 user.h    |  1 +
 usys.S    |  1 +
 8 files changed, 32 insertions(+), 2 deletions(-)

diff --git a/Makefile b/Makefile
index 5d91068..7d17a81 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+	_lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/proc.c b/proc.c
index b122e3b..7d10b0d 100644
--- a/proc.c
+++ b/proc.c
@@ -1,3 +1,4 @@
+
 #include "types.h"
 #include "defs.h"
 #include "param.h"
@@ -25,8 +26,6 @@ void
 pinit(void)
 {
   initlock(&ptable.lock, "ptable");
-  // Seed RNG with current time
-  sgenrand(unixtime());
 }
 
 //PAGEBREAK: 32
@@ -50,6 +49,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = 20;
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -275,7 +275,17 @@ scheduler(void)
     // Enable interrupts on this processor.
     sti();
 
+    //get total tickets and winning ticket.
+    int totalTickets = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+      if (p->state == RUNNABLE) 
+        totalTickets += p->tickets;
+    }
+    int jackpot = random_at_most(totalTickets);
+    totalTickets = 0; 
+
     if (!foundproc) hlt();
+
     foundproc = 0;
 
     // Loop over process table looking for process to run.
@@ -283,6 +293,9 @@ scheduler(void)
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
+      totalTickets += p->tickets;
+      if(totalTickets < jackpot) 
+        continue;
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
@@ -297,6 +310,7 @@ scheduler(void)
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       proc = 0;
+      break;
     }
     release(&ptable.lock);
 
diff --git a/proc.h b/proc.h
index 3b9c3ac..3c3f193 100644
--- a/proc.h
+++ b/proc.h
@@ -66,6 +66,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint tickets;		       // No. lottery tickets for scheduler	
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 0e06ad4..2ed86e2 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets]  sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..ee79af1 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -98,3 +98,12 @@ sys_gettime(void) {
   cmostime(d);
   return 0;
 }
+
+//set no. of tickets for lottery scheduling for this process
+int
+sys_settickets(void) {
+  int n;
+  if (argint(0, &n) < 0) return -1;
+  proc->tickets = n;
+  return n;
+}
diff --git a/user.h b/user.h
index 46d1059..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
-- 
1.9.1

